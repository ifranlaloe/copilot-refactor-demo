I want to scrape the Camunda 7.23 documentation for offline reference. The documentation starts at:  
https://docs.camunda.org/manual/7.23/

**Important structure details:**
- The main documentation page lists chapters in a sidebar (e.g., Introduction, User Guide, etc.).
- Clicking a chapter (e.g., Introduction) navigates to a chapter page (e.g., https://docs.camunda.org/manual/7.23/introduction/), which then reveals its subchapters in the sidebar.
- Clicking a subchapter (e.g., Download) loads its content at a URL like https://docs.camunda.org/manual/7.23/introduction/downloading-camunda/.
- The main content for each subchapter is inside a `<div class="page-content">` (not `.container-fluid`).

**Requirements:**
- For demo purposes, focus only on the first chapter ("Introduction") and its subchapters.
- For each subchapter, fetch its page and extract only the content inside the `.page-content` div.
- For each chapter, create a single text file (e.g., `1.Introduction.txt`) containing:
  - The chapter title at the top.
  - For each subchapter, a heading (e.g., `#Download`) followed by the clean content of that subchapter.
- Do not include navigation, sidebars, headers, footers, edit links, or any repeated/non-content elements.
- Only include the visible documentation content for each subchapter.
- Normalize URLs to avoid double prefixes and ensure correct page fetches.
- Clean up whitespace and remove any remaining non-content elements.
- Ignore images.
- Use a reasonable sleep between requests to avoid flooding the server.
- Add logging so the scraping process can be followed.
- Iterate and confirm that the content for each subchapter matches what is visible on the live documentation site (e.g., https://docs.camunda.org/manual/7.23/introduction/downloading-camunda/).
- Use TypeScript
- Create a sub-folder to work from called camunda-documentation
- Keep iterating and refining until the output matches the visible documentation content for the first chapter and its subchapters.
- Start work immediately.

**Example output for `1.Introduction.txt`:**

```
Introduction

#Download
<content of the Download subchapter>

#Licenses
<content of the Licenses subchapter>

...and so on for all subchapters.
```

The goal is to have one text file per chapter, each containing the full, clean content of that chapter and all its subchapters, matching what is visible on the documentation site for each page.