I want to scrape the Camunda 7.23 documentation for offline reference. The documentation starts at:  
https://docs.camunda.org/manual/7.23/

**Important structure details:**
- The main documentation page lists chapters in a sidebar (e.g., Introduction, User Guide, etc.).
- Clicking a chapter (e.g., Introduction) navigates to a chapter page (e.g., https://docs.camunda.org/manual/7.23/introduction/), which then reveals its subchapters in the sidebar or in an "Additional Links" section.
- Clicking a subchapter (e.g., Download) loads its content at a URL like https://docs.camunda.org/manual/7.23/introduction/downloading-camunda/.
- The main content for each subchapter is inside a `<div class="page-content">` (not `.container-fluid`).

**Requirements:**
- Create a folder camunda-documentation, all files created must be in this folder.
- For demo purposes, focus only on the first chapter ("Introduction") and its subchapters.
- Extract the list of subchapters for the chapter from the sidebar navigation or the "Additional Links" section, preserving their order as shown on the live documentation site.
- For each subchapter, fetch its page and extract only the content inside the `.page-content` div.
- Remove all navigation, sidebars, headers, footers, edit links, copyright, social links, and any repeated/non-content elements. Only include the visible documentation content for each subchapter.
- Normalize URLs to avoid double prefixes and ensure correct page fetches.
- Clean up whitespace and remove any remaining non-content elements. Ignore images.
- Output should be UTF-8 encoded and preserve all Unicode characters.
- For each chapter, create a single text file (e.g., `1.Introduction.txt`) in the `camunda-documentation` folder, with the chapter title at the top, followed by each subchapter as a heading and its clean content, in the order they appear in the sidebar or "Additional Links" section.
- Use a reasonable sleep between requests to avoid flooding the server.
- Add logging so the scraping process can be followed. Log any failed fetches or missing subchapters, but continue processing.
- Iterate and confirm that the content for each subchapter matches what is visible on the live documentation site (e.g., https://docs.camunda.org/manual/7.23/introduction/downloading-camunda/).
- Use TypeScript.
- Keep iterating and refining until the output matches the visible documentation content for the first chapter and its subchapters.
- (Optional) Include a validation step to compare the scraped output with the live documentation for accuracy.
- (Optional) Make the list of chapters/subchapters configurable for future expansion.
- Start work immediately.

**Example output for `1.Introduction.txt`:**

```
Introduction

#Download
<content of the Download subchapter>

#Licenses
<content of the Licenses subchapter>

...and so on for all subchapters.
```

The goal is to have one text file per chapter, each containing the full, clean content of that chapter and all its subchapters, matching what is visible on the documentation site for each page.